# Remote Health Monitoring System

## Overview

This project implements a **Remote Health Monitoring System** using Java and Object-Oriented Programming (OOP) concepts. It demonstrates a modular and robust Remote Patient Monitoring System (RPMS), built using standard industry practices.

The project includes key healthcare functionalities such as user management, health data monitoring, emergency alerts, communication (chat/video), and automated notifications. Maven is used to manage dependencies, particularly for the **email notification service**.

---

## Development Environment Setup

### Setting Up Java & Visual Studio Code

1. **Install Java Development Kit (JDK):**
   - Downloaded and installed the latest version of the JDK from Oracle (or [AdoptOpenJDK](https://adoptium.net/)).
   - Set the `JAVA_HOME` environment variable.
   - Updated the system `PATH` to include `JAVA_HOME/bin`.

2. **Install Visual Studio Code (VS Code):**
   - Downloaded from the [official website](https://code.visualstudio.com/).
   - Installed using standard setup steps.

3. **Install Java Extensions in VS Code:**
   - Installed extensions:
     - *Language Support for Java(TM)* by Red Hat
     - *Debugger for Java*
     - *Java Test Runner*
     - *Maven for Java*

4. **Configure VS Code for Java Development:**
   - Created a new Java workspace.
   - Used `Java: Create Java Project` from the Command Palette.
   - Verified folder structure (`src/`, `lib/`, etc.).
   - Ran the build task to ensure successful compilation.

5. **Run & Debug Java Code:**
   - Used the context menu to run Java applications.
   - Set breakpoints and launched debugger with `F5`.

---

## Project Modules

### 1. User Management

- `User`: Abstract base class for all users.
- `Patient`: Manages vitals, appointments, and feedback.
- `Doctor`: Views vitals, gives feedback, and manages appointments (includes a patient list).
- `Administrator`: Handles system-wide user and log management.

### 2. Health Data Handling

- `VitalSign`: Encapsulates heart rate, blood pressure, oxygen level, and temperature.
- `VitalsDatabase`: Singleton pattern for managing patient vitals history.

### 3. Appointment Scheduling

- `Appointment`: Represents scheduled meeting info.
- `AppointmentManager`: Handles scheduling, approval, and cancellation.

### 4. Doctor-Patient Interaction

- `Feedback`: Captures doctor comments or suggestions.
- `Prescription`: Tracks medication info and instructions.
- `MedicalHistory`: Stores consultation and prescription history.

### 5. Emergency Alert System

- `EmergencyAlert`: Detects abnormal vital signs.
- `EmergencyHandler`: Notifies relevant users when emergencies are triggered.

### 6. Notifications & Reminders

- `Notification`: Sends alerts about appointments, emergencies, and feedback.
- `Reminder`: Sends time-based reminders for medicine, checkups, etc.

> ✅ **Maven Integration:**  
> A Maven-based submodule is configured to support email-based notifications.  
> - **Library Used:** `jakarta.mail`  
> - **Location:** `email_service/`  
> - **Purpose:** Sending real-time alerts to patients and doctors via email.

### 7. Communication (Chat and Video)

- `ChatMessage`: Enables text-based conversation between users.
- `VideoSession`: Schedules and represents video consultations.
- `ChatManager`: Maintains chat history and facilitates communication.

---

## OOP Concepts Applied

- **Encapsulation:** Private fields with public getters/setters.
- **Inheritance:** `User` as superclass to `Patient`, `Doctor`, and `Administrator`.
- **Composition:** `Doctor` class maintains a list of assigned patients.
- **Polymorphism:** Includes method overloading/overriding.
- **Advanced Features:** Includes use of `static`, `final`, constructor overloading, downcasting, and `instanceof`.

---

## Project Structure

```plaintext
oop_assigment/
├── appointment_scheduling/
│   ├── Appointment.java
│   └── AppointmentManager.java
├── doctor_patient_interaction/
│   ├── Feedback.java
│   ├── MedicalHistory.java
│   └── Prescription.java
├── health_data_handling/
│   ├── VitalSign.java
│   └── VitalsDatabase.java
├── emergency_alerts/
│   ├── EmergencyAlert.java
│   └── EmergencyHandler.java
├── notifications/
│   ├── Notification.java
│   └── Reminder.java
├── communication/
│   ├── ChatMessage.java
│   ├── ChatManager.java
│   └── VideoSession.java
├── usermanagement/
│   ├── User.java
│   ├── Patient.java
│   ├── Doctor.java
│   └── Administrator.java
├── email_service/          ← Maven project for sending emails
│   └── ... (pom.xml, utils, SMTP setup)
├── Main.java
├── ScenarioTest.java
└── README.md

## GitHub Repository

The full source code for this project is hosted on GitHub:  
🔗 [Building-a-Health-Monitoring-System-Using-Java](https://github.com/shaheer-shehri/Building-a-Health-Monitoring-System-Using-Java)